package org.usfirst.frc.team1002.robot;

import edu.wpi.first.wpilibj.GenericHID.RumbleType;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SampleRobot;
import edu.wpi.first.wpilibj.Timer;

public class Robot extends SampleRobot {
	//Author:Nathan Pendergrast and Nigel Nderi
	// public static boolean isEnabled;
	// public static boolean isAutonomous;
	static double moveForward;
	static int moveStrafe;
	static int moveTurn;
	static double lastY;
	double desiredheading;
	private ADXRS450_Gyro gyro = new ADXRS450_Gyro();
	public double currentheading;
	public double correction;
	private static RobotDrive autoDrive;
	static final double Kp = 0.03;
	static double angle;
	public static double lastT;
	public static double degreeChange;
	static myDrive mechdrive = new myDrive();
	climbingMech climber = new climbingMech();
	shootingMech shooter = new shootingMech();
	camSystem camsys = new camSystem();
	intakeSystem intake = new intakeSystem();
	servoBallDump balldump = new servoBallDump(0, 1);
	motorBallDump balldump1 = new motorBallDump();
	public static boolean operatorActivated = false;
	// The channel that the driver's Xbox controller is functioning on
	final static int driverChannel = 0;
	// The channel that the operator's Xbox controller is functioning on
	final static int operatorChannel = 1;

	public static Joystick driver = new Joystick(driverChannel);
	public static Joystick operator = new Joystick(operatorChannel);

	public static boolean operatorMode() {
		while (Robot.driver.getRawButton(Xbox.BTN_X)) {
			operatorActivated = true;
		}
		return operatorActivated;
	}

	public Robot() {
		mechdrive.init();
		climber.init();
		camsys.init();
		shooter.init();
		intake.init();
		operatorMode();
	} // INITIALIZERS

	@Override
	public void robotInit() {
		myDrive.frontLeft.reset();
		myDrive.backLeft.reset();
		myDrive.frontRight.reset();
		myDrive.backRight.reset();
	}

	@Override
	public void operatorControl() {

		while (isOperatorControl() && isEnabled()) {
			boolean value = Robot.driver.getRawButton(Xbox.BTN_X);
			operator.setRumble(RumbleType.kLeftRumble, value ? 1 : 0);
			intake.teleOp();
			mechdrive.teleOp();
			climber.teleOp();
			shooter.teleOp();
			// servoBallDump.teleOp();
			Timer.delay(0.005); // wait 5ms to avoid hogging CPU cycles
		}
	}
	
	@Override
	public void autonomous(){
		if(isAutonomous() && isEnabled()){
			auto.autoDriveFwd(.5,.75);
			Timer.delay(12);
		}
	}
}
